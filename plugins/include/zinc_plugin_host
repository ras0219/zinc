#ifndef _ZINC_PLUGIN_HOST_HPP_
#define _ZINC_PLUGIN_HOST_HPP_

#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <cassert>
#include <zinc_plugin>
#include <zinc_dlfcn>
#include <zinc_kernel>

namespace zinc {
  struct LibraryManager {
    typedef std::map<std::string, LibraryHandle*> libraries_t;
    typedef libraries_t::iterator iterator;

    ~LibraryManager() {
      auto it = libraries.begin();
      while (it != libraries.end())
        unload_library_file(it++);
    }

    LibraryHandle* load_library_file(const std::string& filename);

    // Cannot unload libraries at the moment
    inline void unload_library_file(const std::string& filename) { }
    inline void unload_library_file(LibraryHandle* lib) { }
    inline void unload_library_file(iterator it) { }

    Plugin* locate_plugin(const std::string& filename, const std::string& pluginname);

  private:
    libraries_t libraries;
  };

  struct InterfaceUnifier {
    std::vector<Interface*> available;

    // returns nullptr upon failure
    Interface*
    unify_request(const InterfaceRequest& req);

    // returns size 0 vector upon failure
    std::vector<Interface*>
    unify_request(std::size_t num_reqs, const InterfaceRequest* reqs);

    // returns size 0 vector upon failure
    inline std::vector<Interface*>
    unify_request(const Plugin* plug)
      { return unify_request(plug->num_reqs, plug->reqs); }
  };

  struct DefaultKernel {
    DefaultKernel()
      : kernel(Kernel
               ::Impl<DefaultKernel, offsetof(DefaultKernel, kernel)>
               ::interface),
        unifier{{(Interface*)&kernel}}
      { }

    inline void register_interface(zinc::Interface* iface) {
      unifier.available.push_back(iface);
    }
    inline void unregister_interface(zinc::Interface* iface) {
      auto it = std::find(unifier.available.begin(),
                          unifier.available.end(),
                          iface);
      if (it != unifier.available.end())
        unifier.available.erase(it);
    }

    inline std::size_t num_avail_interfaces() { return unifier.available.size(); }
    inline void get_avail_interfaces(zinc::Interface** ifaces) {
      for (auto i : unifier.available)
        *ifaces++ = i;
    }

    inline void load_library_file(str_t filename) {
      libman.load_library_file(filename);
    }

    inline void unload_library_file(str_t filename) {
      libman.unload_library_file(filename);
    }

    inline int load_plugin(str_t filename, str_t pluginname) {
      Plugin* plug = libman.locate_plugin(filename, pluginname);
      if (plug == nullptr)
        // Could not find plugin
        return -1;
      std::vector<Interface*> ifaces = unifier.unify_request(plug);
      if (ifaces.size() != plug->num_reqs)
        // Could not satisfy all requrirements
        return -2;
      if (plug->install == nullptr)
        // Plugin is invalid
        return -3;
      plug->install(ifaces.data());
      return 0;
    }

    inline int unload_plugin(str_t filename, str_t pluginname) {
      // currently cannot unload plugins
      return -1;
    }

    Kernel::Interface kernel;

    LibraryManager libman;
    InterfaceUnifier unifier;
  };
}

#endif

// Local Variables:
// mode: c++
// End:
