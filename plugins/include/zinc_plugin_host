#ifndef _ZINC_PLUGIN_HOST_HPP_
#define _ZINC_PLUGIN_HOST_HPP_

#include <string>
#include <map>
extern "C" {
#include <dlfcn.h>
}

#include "zinc_plugin"

namespace pnp {

  ///////////////////////////////////////////////////////////////
  // Wrapper for dlopen,dlsym,dlclose that throws c++ exceptions
  using Handle = void*;

  Handle open_dl(const char*, int);

  void* open_sym_internal(Handle, const char*);
  template<class F>
  inline F open_sym(Handle h, const std::string& s) {
    return static_cast<F>(open_sym_internal(h, s.c_str()));
  }
  template<class F>
  inline F open_sym(Handle h, const char* s) {
    return static_cast<F>(open_sym_internal(h, s));
  }

  void close_dl(Handle);
  ///////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////
  struct DynamicLib {
    DynamicLib(const char*, int);
    DynamicLib(const std::string&, int);
    ~DynamicLib();

    template<class F>
    inline F open_sym(const std::string& s) {
      F rptr;
      * (void**)(&rptr) = open_sym_internal(hndl, s.c_str());
      return rptr;
    }
    template<class F>
    inline F open_sym(const char* s) {
      F rptr;
      * (void**)(&rptr) = open_sym_internal(hndl, s);
      return rptr;
    }

  private:
    Handle hndl;
  };
  ///////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////
  struct LibraryInstance {
    // typedef std::shared_ptr< LibraryInstance > sptr;
    // typedef std::shared_ptr< const LibraryInstance > const_sptr;
    typedef LibraryInstance* sptr;
    typedef const LibraryInstance* const_sptr;

    LibraryInstance(const std::string& fname);
    ~LibraryInstance();

    DynamicLib hndl;

    std::string filename;

    pnp_module_t* module_info;
  };
  ///////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////
  struct ZincPluginHost {
  private:
    typedef std::map<std::string, LibraryInstance::sptr> s_to_linst_map_t;
    typedef std::multimap<LibraryInstance::sptr, PluginBase*> linst_to_plugin_map_t;
    typedef s_to_linst_map_t::iterator lib_iterator;
    typedef linst_to_plugin_map_t::iterator plugin_iterator;
  public:
    ~ZincPluginHost();

    void add_library_file(const std::string& filename);
    // TODO: these guys
    //void reload_library_file(const std::string& filename);
    //void unload_library_file(const std::string& filename);

    //void reload_library(LibraryInstance::sptr lib);
    //void unload_library(LibraryInstance::sptr lib);

    std::size_t num_libraries();
    lib_iterator libraries_begin();
    lib_iterator libraries_end();

    std::size_t num_plugins();
    plugin_iterator plugins_begin();
    plugin_iterator plugins_end();

    std::size_t num_plugins(LibraryInstance::sptr lib);
    plugin_iterator plugins_begin(LibraryInstance::sptr lib);
    plugin_iterator plugins_end(LibraryInstance::sptr lib);

    PluginBase* load_plugin(const std::string& filename,
                            const std::string& plugin_name,
                            PluginHost* ph);

  private:
    s_to_linst_map_t filename_to_linst;
    linst_to_plugin_map_t linst_to_plugins;
  };
  ///////////////////////////////////////////////////////////////
}

#endif

// Local Variables:
// mode: c++
// End:
