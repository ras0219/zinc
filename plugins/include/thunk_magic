#ifndef _THUNK_MAGIC_HPP_
#define _THUNK_MAGIC_HPP_

template<class T, class U>
struct StaticCastConv {
  static inline T* convert(U* u) { return static_cast<T*>(u); }
};

template<class T>
struct thunk_mpty;
template<class R, class P, class ... Args>
struct thunk_mpty<R (P::*)(Args...)> {
  typedef P Base;
  template<R (P::*memptr)(Args...)>
  struct thunk_mp {
    template< class P2, class Conv = StaticCastConv<P,P2> >
    static R func(P2* p, Args... args) {
      return (Conv::convert(p)->*memptr)(args...);
    }
  };
};

// Conv argument should have
//   DeriveMP* convert(Base*)
template<class Base, class DeriveMP, DeriveMP f, class Conv>
struct make_thunk3 {
  typedef decltype(&thunk_mpty<DeriveMP>::template
                   thunk_mp<f>::template
                   func<Base, Conv>) thunk_type;
  
  static constexpr thunk_type func =
    &thunk_mpty<DeriveMP>::template thunk_mp<f>::template func<Base,Conv>;
};

template<class Base, class DeriveMP, DeriveMP f>
struct make_thunk2 {
  typedef decltype(&thunk_mpty<DeriveMP>::template
                   thunk_mp<f>::template
                   func<Base>) thunk_type;

  static constexpr thunk_type func =
    &thunk_mpty<DeriveMP>::template thunk_mp<f>::template func<Base>;
};


// For not swapping the base type
template<class DeriveMP, DeriveMP f>
struct make_thunk {
  typedef typename thunk_mpty<DeriveMP>::Base Base;
  typedef decltype(&thunk_mpty<DeriveMP>::template
                   thunk_mp<f>::template
                   func<Base>) thunk_type;

  static constexpr thunk_type func =
    &thunk_mpty<DeriveMP>::template
    thunk_mp<f>::template
    func<typename make_thunk<DeriveMP,f>::Base>;
};

#define DDECLTYPE(A) decltype(A), A

#endif

// Local Variables:
// mode: c++
// End:
