#ifndef _ZINC_PLUGIN_HPP_
#define _ZINC_PLUGIN_HPP_

#include <cstddef>
#include <semantic_version>
#include <zinc_interface>

typedef const char* str_t;

namespace zinc {

  struct Plugin {
    // Method
    void (*install)(Interface** argv);
    void (*uninstall)();
    // If transfer succeeds, previous plugin should be completely uninstalled (return 0)
    // If transfer fails, previous plugin should be undisturbed (return -1)
    int (*transfer)(Plugin* prev_version);

    // Attributes
    str_t name;
    SemanticVersion version;

    // Install Requirements [array of InterfaceRequest]
    std::size_t num_reqs;
    InterfaceRequest* reqs;
  };

}
#define CUR_ZINC_VERSION SemanticVersion{0,2,0}

extern "C" {
  struct pnp_module_t {
    SemanticVersion req_zinc_version;

    std::size_t num_exported_plugins;
    zinc::Plugin* (*get_plugin)(std::size_t n);
  };
  // Plugins must define
  //   pnp_module_t pnp_module;
};

#endif

// Local Variables:
// mode: c++
// End:
