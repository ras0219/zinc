#ifndef _ZINC_PLUGIN_HPP_
#define _ZINC_PLUGIN_HPP_

#include <cstddef>

typedef const char* str_t;

namespace pnp {
  struct SemanticVersion {
    unsigned short major;
    unsigned short minor;
    unsigned short patch;
    // TODO: Prerelease field
    // TODO: Build metadata field
  };

  inline bool operator==(SemanticVersion sv1, SemanticVersion sv2) {
    return sv1.major == sv2.major
      && sv1.minor == sv2.minor
      && sv1.patch == sv2.patch;
  }
  inline bool operator!=(SemanticVersion sv1, SemanticVersion sv2) {
    return !(sv1 == sv2);
  }

  inline bool compatible(SemanticVersion library, SemanticVersion required) {
    if (library == required) return true;
    if (library.major == 0) return false;
    if (library.major != required.major) return false;
    if (library.minor < required.minor) return false;
    return true;
  }

  struct Context;
  struct ContextVTable {
    void (*reply)(Context* ctx, str_t msg);
    void (*irc_join)(Context* ctx, str_t channel);
    void (*irc_msg)(Context* ctx, str_t target, str_t msg);
  };
  struct Context {
    ContextVTable *vtable;
  };

  typedef void (*command_cb)(Context* ctx, str_t msg);

  // Library type
  struct library_info_t;
  // Plugin type
  struct PluginBase;

  struct PluginHost;
  struct PluginHostVTable {
    int (*register_command)(PluginHost* ctx, str_t cmd, command_cb cb);
    int (*unregister_command)(PluginHost* ctx, str_t cmd, command_cb cb);

    // Commands involving plugins
    // std::size_t (*num_libraries)(PluginHost* ctx);
    // library_info_t* (*get_library)(PluginHost* ctx, std::size_t n);
    // library_info_t* (*get_library)(PluginHost* ctx, std::size_t n);
  };
  struct PluginHost {
    PluginHostVTable *vtable;
  };

  struct PluginBase {
    // Method
    void (*install)(PluginHost* ph);
    void (*uninstall)(PluginHost* ph);
    // If transfer succeeds, previous plugin should be completely uninstalled
    // If transfer fails, previous plugin should be undisturbed
    int (*transfer)(PluginBase* prev_version);

    // Attributes
    str_t plugin_name;
    SemanticVersion version;
  };

  // Now some templates to help ease the strain
  template<class P>
  struct PluginHostThunk : PluginHost {
    PluginHostThunk() : PluginHost{&static_vtable} {}

    static int rc_thunk(PluginHost* ctx, str_t arg1, command_cb arg2) {
      return static_cast<P*>(ctx)->register_command(arg1, arg2);
    }

    static PluginHostVTable static_vtable;
  };
  template<class P>
  PluginHostVTable PluginHostThunk<P>::static_vtable = { &PluginHostThunk<P>::rc_thunk };

  template<class C>
  struct ContextThunk : Context {
    ContextThunk() : Context{&static_vtable} {}

    static void reply_thunk(Context* ctx, str_t arg1) {
      static_cast<C*>(ctx)->reply(arg1);
    }
    static void irc_join_thunk(Context* ctx, str_t arg1) {
      static_cast<C*>(ctx)->irc_join(arg1);
    }
    static void irc_msg_thunk(Context* ctx, str_t arg1, str_t arg2) {
      static_cast<C*>(ctx)->irc_msg(arg1, arg2);
    }

    static ContextVTable static_vtable;
  };
  template<class P>
  ContextVTable ContextThunk<P>::static_vtable = {
    &ContextThunk<P>::reply_thunk,
    &ContextThunk<P>::irc_join_thunk,
    &ContextThunk<P>::irc_msg_thunk
  };

}
#define CUR_ZINC_VERSION pnp::SemanticVersion{0,0,0}

extern "C" {
  struct pnp_module_t {
    pnp::SemanticVersion req_zinc_version;

    void (*init)();
    void (*destroy)();

    std::size_t num_exported_plugins;
    pnp::PluginBase* (*get_plugin)(std::size_t n);
  };
};

#endif

// Local Variables:
// mode: c++
// End:
