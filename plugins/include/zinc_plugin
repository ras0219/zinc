#ifndef _ZINC_PLUGIN_HPP_
#define _ZINC_PLUGIN_HPP_

#include <cstddef>
#include <iostream>
#include <sstream>
#include "thunk_magic"

typedef const char* str_t;

namespace pnp {
  struct SemanticVersion {
    unsigned short major;
    unsigned short minor;
    unsigned short patch;
    // TODO: Prerelease field
    // TODO: Build metadata field
  };

  inline std::ostream& operator<<(std::ostream& os, SemanticVersion sv) {
    std::stringstream ss;
    ss << sv.major << "." << sv.minor << "." << sv.patch;
    os << ss.str();
    return os;
  }

  inline bool operator==(SemanticVersion sv1, SemanticVersion sv2) {
    return sv1.major == sv2.major
      && sv1.minor == sv2.minor
      && sv1.patch == sv2.patch;
  }
  inline bool operator!=(SemanticVersion sv1, SemanticVersion sv2) {
    return !(sv1 == sv2);
  }

  inline bool compatible(SemanticVersion library, SemanticVersion required) {
    if (library == required) return true;
    if (library.major == 0) return false;
    if (library.major != required.major) return false;
    if (library.minor < required.minor) return false;
    return true;
  }

  struct Context;
  struct ContextVTable {
    void (*reply)(Context* ctx, str_t msg);
  };
  struct Context {
    ContextVTable *vtable;
  };

  typedef void (*command_cb)(Context* ctx, str_t msg);

  // Library type
  struct LibraryInstance;
  // Plugin type
  struct PluginBase;
  typedef PluginBase PluginInstance;

  struct PluginHost;
  struct PluginHostVTable {
    int (*register_command)(PluginHost* ctx, str_t cmd, command_cb cb);
    int (*unregister_command)(PluginHost* ctx, str_t cmd);

    // Commands involving libraries
    std::size_t (*num_libraries)(PluginHost* ctx);
    std::size_t (*list_libraries)(PluginHost* ctx,
                                  std::size_t n,
                                  const LibraryInstance** libs);
    str_t (*get_library_name)(PluginHost* ctx, const LibraryInstance* lib);

    // Commands involving plugins
    std::size_t (*num_loaded_plugins)(PluginHost* ctx);
    std::size_t (*list_loaded_plugins)(PluginHost* ctx,
                                       std::size_t n,
                                       const PluginInstance** plugs);
    const PluginBase* (*get_loaded_plugin_base)(PluginHost* ctx, const PluginInstance* plug);

    std::size_t (*num_provided_plugins)(PluginHost* ctx, const LibraryInstance* lib);
    std::size_t (*list_provided_plugins)(PluginHost* ctx,
                                         const LibraryInstance* lib,
                                         std::size_t n,
                                         const PluginBase** plugs);

    // Commands involving irc
    void (*irc_join)(PluginHost* ctx, str_t channel);
    void (*irc_msg)(PluginHost* ctx, str_t target, str_t msg);
  };
  struct PluginHost {
    PluginHostVTable *vtable;
  };

  struct PluginBase {
    // Method
    void (*install)(PluginHost* ph);
    void (*uninstall)();
    // If transfer succeeds, previous plugin should be completely uninstalled
    // If transfer fails, previous plugin should be undisturbed
    int (*transfer)(PluginBase* prev_version);

    // Attributes
    str_t plugin_name;
    SemanticVersion version;
  };

  // Now some templates to help ease the strain
  template<class P>
  struct PluginHostThunk : PluginHost {
    PluginHostThunk() : PluginHost{&static_vtable} {}

    static PluginHostVTable static_vtable;
  };
  template<class P>
  PluginHostVTable PluginHostThunk<P>::static_vtable = {
    make_thunk2<PluginHost, DDECLTYPE(&P::register_command)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::unregister_command)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::num_libraries)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::list_libraries)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::get_library_name)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::num_loaded_plugins)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::list_loaded_plugins)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::get_loaded_plugin_base)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::num_provided_plugins)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::list_provided_plugins)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::irc_join)>::func,
    make_thunk2<PluginHost, DDECLTYPE(&P::irc_msg)>::func
  };

  template<class C>
  struct ContextThunk : Context {
    ContextThunk() : Context{&static_vtable} {}

    static ContextVTable static_vtable;
  };
  template<class P>
  ContextVTable ContextThunk<P>::static_vtable = {
    make_thunk2<Context, DDECLTYPE(&P::reply)>::func
  };

}
#define CUR_ZINC_VERSION pnp::SemanticVersion{0,0,2}

extern "C" {
  struct pnp_module_t {
    pnp::SemanticVersion req_zinc_version;

    void (*init)();
    void (*destroy)();

    std::size_t num_exported_plugins;
    pnp::PluginBase* (*get_plugin)(std::size_t n);
  };
};

#endif

// Local Variables:
// mode: c++
// End:
